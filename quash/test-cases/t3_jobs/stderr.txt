==11444== Memcheck, a memory error detector
==11444== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==11444== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==11444== Command: /home/j234g594/EECS678/quash/quash
==11444== 
IMPLEMENT ME: src/execute.c(line 72): check_jobs_bg_status()
IMPLEMENT ME: src/execute.c(line 309): create_process()
IMPLEMENT ME: src/execute.c(line 72): check_jobs_bg_status()
IMPLEMENT ME: src/execute.c(line 309): create_process()
IMPLEMENT ME: src/execute.c(line 72): check_jobs_bg_status()
IMPLEMENT ME: src/execute.c(line 309): create_process()
IMPLEMENT ME: src/execute.c(line 339): run_script()
IMPLEMENT ME: src/execute.c(line 72): check_jobs_bg_status()
IMPLEMENT ME: src/execute.c(line 309): create_process()
IMPLEMENT ME: src/execute.c(line 339): run_script()
IMPLEMENT ME: src/execute.c(line 72): check_jobs_bg_status()
IMPLEMENT ME: src/execute.c(line 309): create_process()
IMPLEMENT ME: src/execute.c(line 339): run_script()
==11444== 
==11444== HEAP SUMMARY:
==11444==     in use at exit: 41 bytes in 2 blocks
==11444==   total heap usage: 21 allocs, 19 frees, 1,071,803 bytes allocated
==11444== 
==11444== 41 bytes in 2 blocks are definitely lost in loss record 1 of 1
==11444==    at 0x4C2DB8F: malloc (vg_replace_malloc.c:299)
==11444==    by 0x4EC5489: strdup (strdup.c:42)
==11444==    by 0x401294: get_command_string (quash.c:88)
==11444==    by 0x403ED8: run_script (execute.c:345)
==11444==    by 0x401370: main (quash.c:132)
==11444== 
==11444== LEAK SUMMARY:
==11444==    definitely lost: 41 bytes in 2 blocks
==11444==    indirectly lost: 0 bytes in 0 blocks
==11444==      possibly lost: 0 bytes in 0 blocks
==11444==    still reachable: 0 bytes in 0 blocks
==11444==         suppressed: 0 bytes in 0 blocks
==11444== 
==11444== For counts of detected and suppressed errors, rerun with: -v
==11444== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
