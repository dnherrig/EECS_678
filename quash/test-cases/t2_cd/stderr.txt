==21561== Memcheck, a memory error detector
==21561== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==21561== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==21561== Command: /home/d643h874/EECS678/EECS_678/quash/quash
==21561== 
IMPLEMENT ME: src/execute.c(line 128): check_jobs_bg_status()
IMPLEMENT ME: src/execute.c(line 364): create_process()
==21561== Invalid write of size 1
==21561==    at 0x403980: get_current_directory (execute.c:64)
==21561==    by 0x403D66: run_cd (execute.c:204)
==21561==    by 0x403FBF: parent_run_command (execute.c:320)
==21561==    by 0x4041C1: create_process (execute.c:411)
==21561==    by 0x40435E: run_script (execute.c:441)
==21561==    by 0x401520: main (quash.c:132)
==21561==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==21561== 
==21561== 
==21561== Process terminating with default action of signal 11 (SIGSEGV)
==21561==  Access not within mapped region at address 0x0
==21561==    at 0x403980: get_current_directory (execute.c:64)
==21561==    by 0x403D66: run_cd (execute.c:204)
==21561==    by 0x403FBF: parent_run_command (execute.c:320)
==21561==    by 0x4041C1: create_process (execute.c:411)
==21561==    by 0x40435E: run_script (execute.c:441)
==21561==    by 0x401520: main (quash.c:132)
==21561==  If you believe this happened as a result of a stack
==21561==  overflow in your program's main thread (unlikely but
==21561==  possible), you can try to increase the size of the
==21561==  main thread stack using the --main-stacksize= flag.
==21561==  The main thread stack size used in this run was 8388608.
==21710== Invalid write of size 1
==21710==    at 0x403980: get_current_directory (execute.c:64)
==21710==    by 0x403D66: run_cd (execute.c:204)
==21710==    by 0x403FBF: parent_run_command (execute.c:320)
==21710==    by 0x4041C1: create_process (execute.c:411)
==21710==    by 0x40435E: run_script (execute.c:441)
==21710==    by 0x401520: main (quash.c:132)
==21710==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==21710== 
==21710== 
==21710== Process terminating with default action of signal 11 (SIGSEGV)
==21710==  Access not within mapped region at address 0x0
==21710==    at 0x403980: get_current_directory (execute.c:64)
==21710==    by 0x403D66: run_cd (execute.c:204)
==21710==    by 0x403FBF: parent_run_command (execute.c:320)
==21710==    by 0x4041C1: create_process (execute.c:411)
==21710==    by 0x40435E: run_script (execute.c:441)
==21710==    by 0x401520: main (quash.c:132)
==21710==  If you believe this happened as a result of a stack
==21710==  overflow in your program's main thread (unlikely but
==21710==  possible), you can try to increase the size of the
==21710==  main thread stack using the --main-stacksize= flag.
==21710==  The main thread stack size used in this run was 8388608.
==21710== 
==21710== HEAP SUMMARY:
==21710==     in use at exit: 17,802 bytes in 7 blocks
==21710==   total heap usage: 13 allocs, 6 frees, 1,071,822 bytes allocated
==21710== 
==21710== LEAK SUMMARY:
==21710==    definitely lost: 0 bytes in 0 blocks
==21710==    indirectly lost: 0 bytes in 0 blocks
==21710==      possibly lost: 0 bytes in 0 blocks
==21710==    still reachable: 17,802 bytes in 7 blocks
==21710==         suppressed: 0 bytes in 0 blocks
==21710== Reachable blocks (those to which a pointer was found) are not shown.
==21710== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==21710== 
==21710== For counts of detected and suppressed errors, rerun with: -v
==21710== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
==21561== 
==21561== HEAP SUMMARY:
==21561==     in use at exit: 17,802 bytes in 7 blocks
==21561==   total heap usage: 13 allocs, 6 frees, 1,071,822 bytes allocated
==21561== 
==21561== LEAK SUMMARY:
==21561==    definitely lost: 0 bytes in 0 blocks
==21561==    indirectly lost: 0 bytes in 0 blocks
==21561==      possibly lost: 0 bytes in 0 blocks
==21561==    still reachable: 17,802 bytes in 7 blocks
==21561==         suppressed: 0 bytes in 0 blocks
==21561== Reachable blocks (those to which a pointer was found) are not shown.
==21561== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==21561== 
==21561== For counts of detected and suppressed errors, rerun with: -v
==21561== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
